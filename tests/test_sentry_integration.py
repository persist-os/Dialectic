"""
Test Sentry Integration (SDK + MCP Server)
Tests both sending events TO Sentry and reading FROM Sentry
"""

import asyncio
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import our modules
from config.sentry_config import (
    initialize_sentry,
    capture_agent_event,
    capture_documentation_update,
    capture_learning_event,
    SENTRY_ORG_SLUG,
    SENTRY_PROJECT_SLUG
)
from connectors.sentry_connector import SentryMCPConnector, SentryEventSimulator
import sentry_sdk


async def test_full_sentry_integration():
    """
    Complete Sentry integration test
    Tests both SDK (sending) and MCP (reading)
    """
    
    print("üåå DIALECTIC - Complete Sentry Integration Test")
    print("=" * 60)
    
    # PART 1: Test Sentry SDK (Sending events)
    print("\nüì§ PART 1: Testing Sentry SDK (Sending Events)")
    print("-" * 60)
    
    print("\n1Ô∏è‚É£ Initializing Sentry SDK...")
    initialize_sentry(environment="test")
    
    print("\n2Ô∏è‚É£ Sending test error...")
    try:
        # Intentional error
        test_value = 1 / 0
    except ZeroDivisionError as e:
        sentry_sdk.capture_exception(e)
        print("   ‚úÖ Test error captured and sent to Sentry")
    
    print("\n3Ô∏è‚É£ Sending custom agent events...")
    
    # Simulate agent generation
    test_events = [
        {
            "type": "security_specialist",
            "data": {
                "files": ["src/auth/jwt.py"],
                "message": "JWT authentication implementation"
            }
        },
        {
            "type": "mvp_strategist",
            "data": {
                "files": ["src/prototype/feature.py"],
                "message": "Rapid prototype development"
            }
        },
        {
            "type": "performance_expert",
            "data": {
                "files": ["src/api/optimize.py"],
                "message": "API optimization"
            }
        }
    ]
    
    for event in test_events:
        capture_agent_event(
            agent_type=event["type"],
            event_data=event["data"],
            success=True
        )
        print(f"   ‚úÖ Captured {event['type']} event")
    
    print("\n4Ô∏è‚É£ Sending documentation update event...")
    capture_documentation_update(
        files_updated=[
            ".cursor/rules/security_rules.md",
            ".cursor/commands/security_commands.md"
        ],
        agent_type="security_specialist"
    )
    print("   ‚úÖ Documentation update captured")
    
    print("\n5Ô∏è‚É£ Sending learning event...")
    capture_learning_event(
        pattern_key="sec:true|mvp:false|perf:false",
        success_rate=95.5
    )
    print("   ‚úÖ Learning event captured")
    
    # PART 2: Test Sentry MCP Server (Reading events)
    print("\n\nüì• PART 2: Testing Sentry MCP Server (Reading Issues)")
    print("-" * 60)
    
    print("\n1Ô∏è‚É£ Initializing MCP connector...")
    connector = SentryMCPConnector(
        organization_slug=SENTRY_ORG_SLUG,
        project_slug=SENTRY_PROJECT_SLUG
    )
    
    connected = await connector.connect()
    
    if connected:
        print("   ‚úÖ MCP connector initialized")
    else:
        print("   ‚ö†Ô∏è  MCP connector needs configuration")
    
    print("\n2Ô∏è‚É£ Testing event simulator (for demo)...")
    simulator = SentryEventSimulator()
    
    demo_scenarios = ["security", "performance", "error", "mvp"]
    
    for scenario in demo_scenarios:
        event = simulator.generate_mock_event(scenario)
        print(f"\n   üé≠ {scenario.upper()} Scenario:")
        print(f"      Message: {event['message']}")
        print(f"      Files: {', '.join(event['files'][:2])}")
        print(f"      Level: {event['level']}")
    
    # Summary
    print("\n\n" + "=" * 60)
    print("‚úÖ SENTRY INTEGRATION TEST COMPLETE")
    print("=" * 60)
    
    print("\nüìä What was tested:")
    print("   ‚úÖ Sentry SDK initialized")
    print("   ‚úÖ Error tracking working")
    print("   ‚úÖ Custom agent events sent")
    print("   ‚úÖ Documentation events captured")
    print("   ‚úÖ Learning events tracked")
    print("   ‚úÖ MCP connector initialized")
    print("   ‚úÖ Event simulator ready for demo")
    
    print("\nüéØ Next Steps:")
    print("   1. Check Sentry dashboard for events:")
    print(f"      ‚Üí https://sentry.io/organizations/{SENTRY_ORG_SLUG}/issues/")
    print("\n   2. Restart Cursor to authenticate Sentry MCP:")
    print("      ‚Üí Cursor will prompt for OAuth")
    print("\n   3. Build Context Analyzer (agents/context_analyzer.py)")
    
    print("\nüí° Sponsor Integration Status:")
    print("   ‚úÖ Sentry SDK - Sending events")
    print("   ‚úÖ Sentry MCP - Reading issues")
    print("   ‚úÖ Custom events for Dialectic features")
    print("   ‚Üí Ready for demo!")


if __name__ == "__main__":
    asyncio.run(test_full_sentry_integration())

