"""
Quick test script for Sentry MCP connection
Run this to verify everything is set up correctly
"""

import asyncio
from connectors.sentry_connector import SentryMCPConnector, SentryEventSimulator


async def test_sentry_setup():
    """Test Sentry connector setup"""
    
    print("üåå DIALECTIC - Sentry Integration Test")
    print("=" * 60)
    
    # Step 1: Test connector initialization
    print("\n1Ô∏è‚É£ Testing Sentry Connector Initialization...")
    
    # TODO: Replace with your actual Sentry organization slug
    # You can find this in Sentry ‚Üí Settings ‚Üí Organization Settings
    ORGANIZATION_SLUG = "persistos"  # ‚ö†Ô∏è REPLACE THIS
    PROJECT_SLUG = "dialectic"
    
    connector = SentryMCPConnector(
        organization_slug=ORGANIZATION_SLUG,
        project_slug=PROJECT_SLUG
    )
    
    connected = await connector.connect()
    
    if connected:
        print("   ‚úÖ Connector initialized successfully")
    else:
        print("   ‚ö†Ô∏è  Connector initialized but needs configuration")
        print("   üìù Update ORGANIZATION_SLUG in this file")
    
    # Step 2: Test event simulator
    print("\n2Ô∏è‚É£ Testing Event Simulator (for demo purposes)...")
    simulator = SentryEventSimulator()
    
    event_types = ["security", "performance", "error", "mvp"]
    
    for event_type in event_types:
        event = simulator.generate_mock_event(event_type)
        print(f"\n   üé≠ {event_type.upper()} Event:")
        print(f"      Message: {event['message']}")
        print(f"      Files: {', '.join(event['files'][:2])}")
        print(f"      Level: {event['level']}")
    
    # Step 3: Instructions for next steps
    print("\n" + "=" * 60)
    print("üìã Next Steps:")
    print("=" * 60)
    print("\n1. Get your Sentry organization slug:")
    print("   ‚Üí Go to Sentry ‚Üí Settings ‚Üí Organization Settings")
    print("   ‚Üí Copy the 'Organization Slug' value")
    print("   ‚Üí Update ORGANIZATION_SLUG in this test file")
    
    print("\n2. Create a Sentry project called 'dialectic':")
    print("   ‚Üí In Sentry dashboard, click 'Projects'")
    print("   ‚Üí Click 'Create Project'")
    print("   ‚Üí Select 'Python' platform")
    print("   ‚Üí Name it 'dialectic'")
    
    print("\n3. Authenticate Sentry MCP in Cursor:")
    print("   ‚Üí Restart Cursor to load the new MCP config")
    print("   ‚Üí You should be prompted to authenticate with Sentry")
    print("   ‚Üí Grant access to your organization")
    
    print("\n4. Test with real Sentry data:")
    print("   ‚Üí Once authenticated, we can fetch real issues")
    print("   ‚Üí For now, we'll use the simulator for demos")
    
    print("\n‚úÖ Sentry connector is ready for Phase 1!")
    print("   Next: Build the Context Analyzer (agents/context_analyzer.py)")
    

if __name__ == "__main__":
    asyncio.run(test_sentry_setup())

